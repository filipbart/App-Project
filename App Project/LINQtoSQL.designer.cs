#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App_Project
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProjectBase")]
	public partial class LINQtoSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertBrandOwner(BrandOwner instance);
    partial void UpdateBrandOwner(BrandOwner instance);
    partial void DeleteBrandOwner(BrandOwner instance);
    #endregion
		
		public LINQtoSQLDataContext() : 
				base(global::App_Project.Properties.Settings.Default.ProjectBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Brand> Brand
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<BrandOwner> BrandOwner
		{
			get
			{
				return this.GetTable<BrandOwner>();
			}
		}
		
		public System.Data.Linq.Table<Impression> Impression
		{
			get
			{
				return this.GetTable<Impression>();
			}
		}
		
		public System.Data.Linq.Table<Industry> Industry
		{
			get
			{
				return this.GetTable<Industry>();
			}
		}
		
		public System.Data.Linq.Table<xDate> xDate
		{
			get
			{
				return this.GetTable<xDate>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Brand_id;
		
		private string _brandName;
		
		private System.Nullable<int> _bOwner_id;
		
		private EntityRef<BrandOwner> _BrandOwner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrand_idChanging(int value);
    partial void OnBrand_idChanged();
    partial void OnbrandNameChanging(string value);
    partial void OnbrandNameChanged();
    partial void OnbOwner_idChanging(System.Nullable<int> value);
    partial void OnbOwner_idChanged();
    #endregion
		
		public Brand()
		{
			this._BrandOwner = default(EntityRef<BrandOwner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Brand_id
		{
			get
			{
				return this._Brand_id;
			}
			set
			{
				if ((this._Brand_id != value))
				{
					this.OnBrand_idChanging(value);
					this.SendPropertyChanging();
					this._Brand_id = value;
					this.SendPropertyChanged("Brand_id");
					this.OnBrand_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brandName", DbType="NVarChar(255)")]
		public string brandName
		{
			get
			{
				return this._brandName;
			}
			set
			{
				if ((this._brandName != value))
				{
					this.OnbrandNameChanging(value);
					this.SendPropertyChanging();
					this._brandName = value;
					this.SendPropertyChanged("brandName");
					this.OnbrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bOwner_id", DbType="Int")]
		public System.Nullable<int> bOwner_id
		{
			get
			{
				return this._bOwner_id;
			}
			set
			{
				if ((this._bOwner_id != value))
				{
					if (this._BrandOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbOwner_idChanging(value);
					this.SendPropertyChanging();
					this._bOwner_id = value;
					this.SendPropertyChanged("bOwner_id");
					this.OnbOwner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandOwner_Brand", Storage="_BrandOwner", ThisKey="bOwner_id", OtherKey="BrandOwner_id", IsForeignKey=true)]
		public BrandOwner BrandOwner
		{
			get
			{
				return this._BrandOwner.Entity;
			}
			set
			{
				BrandOwner previousValue = this._BrandOwner.Entity;
				if (((previousValue != value) 
							|| (this._BrandOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrandOwner.Entity = null;
						previousValue.Brand.Remove(this);
					}
					this._BrandOwner.Entity = value;
					if ((value != null))
					{
						value.Brand.Add(this);
						this._bOwner_id = value.BrandOwner_id;
					}
					else
					{
						this._bOwner_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("BrandOwner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrandOwner")]
	public partial class BrandOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrandOwner_id;
		
		private string _brandOwner;
		
		private EntitySet<Brand> _Brand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrandOwner_idChanging(int value);
    partial void OnBrandOwner_idChanged();
    partial void OnbrandOwnerChanging(string value);
    partial void OnbrandOwnerChanged();
    #endregion
		
		public BrandOwner()
		{
			this._Brand = new EntitySet<Brand>(new Action<Brand>(this.attach_Brand), new Action<Brand>(this.detach_Brand));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandOwner_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BrandOwner_id
		{
			get
			{
				return this._BrandOwner_id;
			}
			set
			{
				if ((this._BrandOwner_id != value))
				{
					this.OnBrandOwner_idChanging(value);
					this.SendPropertyChanging();
					this._BrandOwner_id = value;
					this.SendPropertyChanged("BrandOwner_id");
					this.OnBrandOwner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brandOwner", DbType="NVarChar(255)")]
		public string brandOwner
		{
			get
			{
				return this._brandOwner;
			}
			set
			{
				if ((this._brandOwner != value))
				{
					this.OnbrandOwnerChanging(value);
					this.SendPropertyChanging();
					this._brandOwner = value;
					this.SendPropertyChanged("brandOwner");
					this.OnbrandOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandOwner_Brand", Storage="_Brand", ThisKey="BrandOwner_id", OtherKey="bOwner_id")]
		public EntitySet<Brand> Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				this._Brand.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Brand(Brand entity)
		{
			this.SendPropertyChanging();
			entity.BrandOwner = this;
		}
		
		private void detach_Brand(Brand entity)
		{
			this.SendPropertyChanging();
			entity.BrandOwner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Impression")]
	public partial class Impression
	{
		
		private System.Nullable<int> _impression;
		
		private string _impressionType;
		
		public Impression()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_impression", DbType="Int")]
		public System.Nullable<int> impression
		{
			get
			{
				return this._impression;
			}
			set
			{
				if ((this._impression != value))
				{
					this._impression = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_impressionType", DbType="VarChar(6)")]
		public string impressionType
		{
			get
			{
				return this._impressionType;
			}
			set
			{
				if ((this._impressionType != value))
				{
					this._impressionType = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Industry")]
	public partial class Industry
	{
		
		private string _industry;
		
		private string _subIndustry;
		
		private string _subIndustry2;
		
		private string _subIndustry3;
		
		private string _subIndustry4;
		
		public Industry()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_industry", DbType="NVarChar(255)")]
		public string industry
		{
			get
			{
				return this._industry;
			}
			set
			{
				if ((this._industry != value))
				{
					this._industry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subIndustry", DbType="NVarChar(255)")]
		public string subIndustry
		{
			get
			{
				return this._subIndustry;
			}
			set
			{
				if ((this._subIndustry != value))
				{
					this._subIndustry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subIndustry2", DbType="NVarChar(255)")]
		public string subIndustry2
		{
			get
			{
				return this._subIndustry2;
			}
			set
			{
				if ((this._subIndustry2 != value))
				{
					this._subIndustry2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subIndustry3", DbType="NVarChar(255)")]
		public string subIndustry3
		{
			get
			{
				return this._subIndustry3;
			}
			set
			{
				if ((this._subIndustry3 != value))
				{
					this._subIndustry3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subIndustry4", DbType="NVarChar(255)")]
		public string subIndustry4
		{
			get
			{
				return this._subIndustry4;
			}
			set
			{
				if ((this._subIndustry4 != value))
				{
					this._subIndustry4 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.xDate")]
	public partial class xDate
	{
		
		private System.Nullable<System.DateTime> _xDate1;
		
		public xDate()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="xDate", Storage="_xDate1", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> xDate1
		{
			get
			{
				return this._xDate1;
			}
			set
			{
				if ((this._xDate1 != value))
				{
					this._xDate1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
